/*****************************************
  Emitting Generated Code                  
*******************************************/
class conditional extends ((Array[Char], Boolean)=>(OptionInt)) {
def apply(x0:Array[Char], x1:Boolean): OptionInt = {
// TODO: use vars instead of tuples to return multiple values
val (x6,x7) = if (x1) {
(1,false)
} else {
(0,true)
}
// TODO: use vars instead of tuples to return multiple values
val (x12,x13) = if (x7) {
(0,false)
} else {
(x6,true)
}
val x14 = new OptionInt(x12,x13)
x14
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(1,true)
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class conditionalMap extends ((Array[Char], Boolean)=>(OptionInt)) {
def apply(x0:Array[Char], x1:Boolean): OptionInt = {
// TODO: use vars instead of tuples to return multiple values
val (x7,x6) = if (x1) {
(false,1)
} else {
(true,0)
}
// TODO: use vars instead of tuples to return multiple values
val (x12,x13) = if (x7) {
(0,true)
} else {
val x9 = x6 * 2
(x9,false)
}
// TODO: use vars instead of tuples to return multiple values
val (x18,x19) = if (x13) {
(0,false)
} else {
(x12,true)
}
val x20 = new OptionInt(x18,x19)
x20
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(2,true)
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class conditionalMapHand extends ((Array[Char], Boolean)=>(OptionInt)) {
def apply(x0:Array[Char], x1:Boolean): OptionInt = {
// TODO: use vars instead of tuples to return multiple values
val (x7,x6) = if (x1) {
(false,1)
} else {
(true,0)
}
// TODO: use vars instead of tuples to return multiple values
val (x12,x13) = if (x7) {
(0,true)
} else {
val x9 = x6 * 2
(x9,false)
}
// TODO: use vars instead of tuples to return multiple values
val (x18,x19) = if (x13) {
(0,false)
} else {
(x12,true)
}
val x20 = new OptionInt(x18,x19)
x20
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(2,true)
OptionInt(0,false)
